// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/store.go
//
// Generated by this command:
//
//	mockgen -source=db/sqlc/store.go -destination=db/mock/store_mock.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/Streamfair/streamfair_idp/db/sqlc"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountTotalNumberOfSessionsPerUser mocks base method.
func (m *MockStore) CountTotalNumberOfSessionsPerUser(ctx context.Context) ([]db.CountTotalNumberOfSessionsPerUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalNumberOfSessionsPerUser", ctx)
	ret0, _ := ret[0].([]db.CountTotalNumberOfSessionsPerUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalNumberOfSessionsPerUser indicates an expected call of CountTotalNumberOfSessionsPerUser.
func (mr *MockStoreMockRecorder) CountTotalNumberOfSessionsPerUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalNumberOfSessionsPerUser", reflect.TypeOf((*MockStore)(nil).CountTotalNumberOfSessionsPerUser), ctx)
}

// CreateUserAccount mocks base method.
func (m *MockStore) CreateUserAccount(ctx context.Context, arg db.CreateUserAccountParams) (db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, arg)
	ret0, _ := ret[0].(db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockStoreMockRecorder) CreateUserAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockStore)(nil).CreateUserAccount), ctx, arg)
}

// DeleteUserAccountById mocks base method.
func (m *MockStore) DeleteUserAccountById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccountById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccountById indicates an expected call of DeleteUserAccountById.
func (mr *MockStoreMockRecorder) DeleteUserAccountById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccountById", reflect.TypeOf((*MockStore)(nil).DeleteUserAccountById), ctx, id)
}

// DeleteUserAccountByValue mocks base method.
func (m *MockStore) DeleteUserAccountByValue(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccountByValue", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccountByValue indicates an expected call of DeleteUserAccountByValue.
func (mr *MockStoreMockRecorder) DeleteUserAccountByValue(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccountByValue", reflect.TypeOf((*MockStore)(nil).DeleteUserAccountByValue), ctx, username)
}

// FetchDataForSpecificDateRange mocks base method.
func (m *MockStore) FetchDataForSpecificDateRange(ctx context.Context, arg db.FetchDataForSpecificDateRangeParams) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDataForSpecificDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDataForSpecificDateRange indicates an expected call of FetchDataForSpecificDateRange.
func (mr *MockStoreMockRecorder) FetchDataForSpecificDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDataForSpecificDateRange", reflect.TypeOf((*MockStore)(nil).FetchDataForSpecificDateRange), ctx, arg)
}

// GetAllUserAccounts mocks base method.
func (m *MockStore) GetAllUserAccounts(ctx context.Context) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserAccounts", ctx)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserAccounts indicates an expected call of GetAllUserAccounts.
func (mr *MockStoreMockRecorder) GetAllUserAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserAccounts", reflect.TypeOf((*MockStore)(nil).GetAllUserAccounts), ctx)
}

// GetUserAccountByEmail mocks base method.
func (m *MockStore) GetUserAccountByEmail(ctx context.Context, email string) (db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByEmail", ctx, email)
	ret0, _ := ret[0].(db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByEmail indicates an expected call of GetUserAccountByEmail.
func (mr *MockStoreMockRecorder) GetUserAccountByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByEmail", reflect.TypeOf((*MockStore)(nil).GetUserAccountByEmail), ctx, email)
}

// GetUserAccountById mocks base method.
func (m *MockStore) GetUserAccountById(ctx context.Context, id int64) (db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountById", ctx, id)
	ret0, _ := ret[0].(db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountById indicates an expected call of GetUserAccountById.
func (mr *MockStoreMockRecorder) GetUserAccountById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountById", reflect.TypeOf((*MockStore)(nil).GetUserAccountById), ctx, id)
}

// GetUserAccountByUserAccountname mocks base method.
func (m *MockStore) GetUserAccountByUserAccountname(ctx context.Context, username string) (db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByUserAccountname", ctx, username)
	ret0, _ := ret[0].(db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByUserAccountname indicates an expected call of GetUserAccountByUserAccountname.
func (mr *MockStoreMockRecorder) GetUserAccountByUserAccountname(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByUserAccountname", reflect.TypeOf((*MockStore)(nil).GetUserAccountByUserAccountname), ctx, username)
}

// GetUserAccountWithActiveSessions mocks base method.
func (m *MockStore) GetUserAccountWithActiveSessions(ctx context.Context) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountWithActiveSessions", ctx)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountWithActiveSessions indicates an expected call of GetUserAccountWithActiveSessions.
func (mr *MockStoreMockRecorder) GetUserAccountWithActiveSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountWithActiveSessions", reflect.TypeOf((*MockStore)(nil).GetUserAccountWithActiveSessions), ctx)
}

// GetUserAccountWithBlockedSessions mocks base method.
func (m *MockStore) GetUserAccountWithBlockedSessions(ctx context.Context) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountWithBlockedSessions", ctx)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountWithBlockedSessions indicates an expected call of GetUserAccountWithBlockedSessions.
func (mr *MockStoreMockRecorder) GetUserAccountWithBlockedSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountWithBlockedSessions", reflect.TypeOf((*MockStore)(nil).GetUserAccountWithBlockedSessions), ctx)
}

// GetUserAccountWithPermissions mocks base method.
func (m *MockStore) GetUserAccountWithPermissions(ctx context.Context, permissions string) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountWithPermissions", ctx, permissions)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountWithPermissions indicates an expected call of GetUserAccountWithPermissions.
func (mr *MockStoreMockRecorder) GetUserAccountWithPermissions(ctx, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountWithPermissions", reflect.TypeOf((*MockStore)(nil).GetUserAccountWithPermissions), ctx, permissions)
}

// GetUserAccountsByAccountStatus mocks base method.
func (m *MockStore) GetUserAccountsByAccountStatus(ctx context.Context, accountStatus string) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsByAccountStatus", ctx, accountStatus)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsByAccountStatus indicates an expected call of GetUserAccountsByAccountStatus.
func (mr *MockStoreMockRecorder) GetUserAccountsByAccountStatus(ctx, accountStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsByAccountStatus", reflect.TypeOf((*MockStore)(nil).GetUserAccountsByAccountStatus), ctx, accountStatus)
}

// GetUserAccountsByAccountType mocks base method.
func (m *MockStore) GetUserAccountsByAccountType(ctx context.Context, accountType int32) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsByAccountType", ctx, accountType)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsByAccountType indicates an expected call of GetUserAccountsByAccountType.
func (mr *MockStoreMockRecorder) GetUserAccountsByAccountType(ctx, accountType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsByAccountType", reflect.TypeOf((*MockStore)(nil).GetUserAccountsByAccountType), ctx, accountType)
}

// GetUserAccountsByCountryCode mocks base method.
func (m *MockStore) GetUserAccountsByCountryCode(ctx context.Context, countryCode string) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsByCountryCode", ctx, countryCode)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsByCountryCode indicates an expected call of GetUserAccountsByCountryCode.
func (mr *MockStoreMockRecorder) GetUserAccountsByCountryCode(ctx, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsByCountryCode", reflect.TypeOf((*MockStore)(nil).GetUserAccountsByCountryCode), ctx, countryCode)
}

// GetUserAccountsByOwner mocks base method.
func (m *MockStore) GetUserAccountsByOwner(ctx context.Context, owner string) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsByOwner", ctx, owner)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsByOwner indicates an expected call of GetUserAccountsByOwner.
func (mr *MockStoreMockRecorder) GetUserAccountsByOwner(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsByOwner", reflect.TypeOf((*MockStore)(nil).GetUserAccountsByOwner), ctx, owner)
}

// GetUserAccountsByRoleId mocks base method.
func (m *MockStore) GetUserAccountsByRoleId(ctx context.Context, roleID pgtype.Int8) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsByRoleId", ctx, roleID)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsByRoleId indicates an expected call of GetUserAccountsByRoleId.
func (mr *MockStoreMockRecorder) GetUserAccountsByRoleId(ctx, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsByRoleId", reflect.TypeOf((*MockStore)(nil).GetUserAccountsByRoleId), ctx, roleID)
}

// GetUserAccountsCreatedAfter mocks base method.
func (m *MockStore) GetUserAccountsCreatedAfter(ctx context.Context, userCreatedAt time.Time) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsCreatedAfter", ctx, userCreatedAt)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsCreatedAfter indicates an expected call of GetUserAccountsCreatedAfter.
func (mr *MockStoreMockRecorder) GetUserAccountsCreatedAfter(ctx, userCreatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsCreatedAfter", reflect.TypeOf((*MockStore)(nil).GetUserAccountsCreatedAfter), ctx, userCreatedAt)
}

// GetUserAccountsUpdatedAfter mocks base method.
func (m *MockStore) GetUserAccountsUpdatedAfter(ctx context.Context, userUpdatedAt time.Time) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountsUpdatedAfter", ctx, userUpdatedAt)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountsUpdatedAfter indicates an expected call of GetUserAccountsUpdatedAfter.
func (mr *MockStoreMockRecorder) GetUserAccountsUpdatedAfter(ctx, userUpdatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountsUpdatedAfter", reflect.TypeOf((*MockStore)(nil).GetUserAccountsUpdatedAfter), ctx, userUpdatedAt)
}

// ListUserAccounts mocks base method.
func (m *MockStore) ListUserAccounts(ctx context.Context, arg db.ListUserAccountsParams) ([]db.ListUserAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAccounts", ctx, arg)
	ret0, _ := ret[0].([]db.ListUserAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAccounts indicates an expected call of ListUserAccounts.
func (mr *MockStoreMockRecorder) ListUserAccounts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAccounts", reflect.TypeOf((*MockStore)(nil).ListUserAccounts), ctx, arg)
}

// OrderResultsByLastLoginTime mocks base method.
func (m *MockStore) OrderResultsByLastLoginTime(ctx context.Context) ([]db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderResultsByLastLoginTime", ctx)
	ret0, _ := ret[0].([]db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderResultsByLastLoginTime indicates an expected call of OrderResultsByLastLoginTime.
func (mr *MockStoreMockRecorder) OrderResultsByLastLoginTime(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderResultsByLastLoginTime", reflect.TypeOf((*MockStore)(nil).OrderResultsByLastLoginTime), ctx)
}

// Ping mocks base method.
func (m *MockStore) Ping(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoreMockRecorder) Ping(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStore)(nil).Ping), ctx, timeout)
}

// UpdateUserAccount mocks base method.
func (m *MockStore) UpdateUserAccount(ctx context.Context, arg db.UpdateUserAccountParams) (db.IdpSvcUserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccount", ctx, arg)
	ret0, _ := ret[0].(db.IdpSvcUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAccount indicates an expected call of UpdateUserAccount.
func (mr *MockStoreMockRecorder) UpdateUserAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccount", reflect.TypeOf((*MockStore)(nil).UpdateUserAccount), ctx, arg)
}
