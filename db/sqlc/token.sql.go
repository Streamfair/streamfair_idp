// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: token.sql

package db

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO "idp_svc"."Tokens" (user_id, token, expires_at) VALUES ($1, $2, $3) RETURNING id, user_id, token, expires_at, revoked
`

type CreateTokenParams struct {
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (IdpSvcToken, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i IdpSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM "idp_svc"."Tokens" WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, user_id, token, expires_at, revoked FROM "idp_svc"."Tokens" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTokenByID(ctx context.Context, id int64) (IdpSvcToken, error) {
	row := q.db.QueryRow(ctx, getTokenByID, id)
	var i IdpSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return i, err
}

const getTokenByValue = `-- name: GetTokenByValue :one
SELECT id, user_id, token, expires_at, revoked FROM "idp_svc"."Tokens" WHERE token = $1 LIMIT 1
`

func (q *Queries) GetTokenByValue(ctx context.Context, token string) (IdpSvcToken, error) {
	row := q.db.QueryRow(ctx, getTokenByValue, token)
	var i IdpSvcToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return i, err
}

const listTokens = `-- name: ListTokens :many
SELECT id, user_id, token, expires_at, revoked FROM "idp_svc"."Tokens" ORDER BY id LIMIT $1 OFFSET $2
`

type ListTokensParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTokens(ctx context.Context, arg ListTokensParams) ([]IdpSvcToken, error) {
	rows, err := q.db.Query(ctx, listTokens, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcToken{}
	for rows.Next() {
		var i IdpSvcToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.Revoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :one
UPDATE "idp_svc"."Tokens" SET token = COALESCE($2, token), expires_at = COALESCE($3, expires_at) WHERE id = $1 RETURNING token, expires_at
`

type UpdateTokenParams struct {
	ID        int64     `json:"id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

type UpdateTokenRow struct {
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (UpdateTokenRow, error) {
	row := q.db.QueryRow(ctx, updateToken, arg.ID, arg.Token, arg.ExpiresAt)
	var i UpdateTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt)
	return i, err
}
