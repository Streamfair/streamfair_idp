// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_role.sql

package db

import (
	"context"
)

const assignRoleToUser = `-- name: AssignRoleToUser :one
INSERT INTO "idp_svc"."UserRoles" (user_id, role_id) VALUES ($1, $2) RETURNING user_id, role_id
`

type AssignRoleToUserParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) (IdpSvcUserRole, error) {
	row := q.db.QueryRow(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	var i IdpSvcUserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}

const checkIfUserHasRole = `-- name: CheckIfUserHasRole :one
SELECT user_id, role_id FROM "idp_svc"."UserRoles" WHERE user_id = $1 AND role_id = $2
`

type CheckIfUserHasRoleParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) CheckIfUserHasRole(ctx context.Context, arg CheckIfUserHasRoleParams) (IdpSvcUserRole, error) {
	row := q.db.QueryRow(ctx, checkIfUserHasRole, arg.UserID, arg.RoleID)
	var i IdpSvcUserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT user_id, role_id FROM "idp_svc"."UserRoles" WHERE user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID int64) ([]IdpSvcUserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserRole{}
	for rows.Next() {
		var i IdpSvcUserRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM "idp_svc"."UserRoles" WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}
