// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: userAccount.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (IdpSvcUserAccountView, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i IdpSvcUserAccountView
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.UserStatus,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.AccountID,
		&i.AccountName,
		&i.AccountType,
		&i.Owner,
		&i.Bio,
		&i.AccountStatus,
		&i.Plan,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.AccountTypeID,
		&i.AccountTypeName,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.IsRegularUser,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (IdpSvcUserAccountView, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i IdpSvcUserAccountView
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.UserStatus,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.AccountID,
		&i.AccountName,
		&i.AccountType,
		&i.Owner,
		&i.Bio,
		&i.AccountStatus,
		&i.Plan,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.AccountTypeID,
		&i.AccountTypeName,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.IsRegularUser,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (IdpSvcUserAccountView, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i IdpSvcUserAccountView
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.CountryCode,
		&i.RoleID,
		&i.UserStatus,
		&i.LastLoginAt,
		&i.UsernameChangedAt,
		&i.EmailChangedAt,
		&i.PasswordChangedAt,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.AccountID,
		&i.AccountName,
		&i.AccountType,
		&i.Owner,
		&i.Bio,
		&i.AccountStatus,
		&i.Plan,
		&i.AvatarUri,
		&i.Plays,
		&i.Likes,
		&i.Follows,
		&i.Shares,
		&i.AccountTypeID,
		&i.AccountTypeName,
		&i.Permissions,
		&i.IsArtist,
		&i.IsProducer,
		&i.IsWriter,
		&i.IsLabel,
		&i.IsRegularUser,
	)
	return i, err
}

const getUsersByAccountStatus = `-- name: GetUsersByAccountStatus :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE account_status = $1
`

func (q *Queries) GetUsersByAccountStatus(ctx context.Context, accountStatus string) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersByAccountStatus, accountStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByAccountType = `-- name: GetUsersByAccountType :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE account_type = $1
`

func (q *Queries) GetUsersByAccountType(ctx context.Context, accountType int32) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersByAccountType, accountType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByCountryCode = `-- name: GetUsersByCountryCode :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE country_code = $1
`

func (q *Queries) GetUsersByCountryCode(ctx context.Context, countryCode string) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersByCountryCode, countryCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByOwner = `-- name: GetUsersByOwner :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE owner = $1
`

func (q *Queries) GetUsersByOwner(ctx context.Context, owner string) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRoleId = `-- name: GetUsersByRoleId :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE role_id = $1
`

func (q *Queries) GetUsersByRoleId(ctx context.Context, roleID pgtype.Int8) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCreatedAfter = `-- name: GetUsersCreatedAfter :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE user_created_at > $1
`

func (q *Queries) GetUsersCreatedAfter(ctx context.Context, userCreatedAt time.Time) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersCreatedAfter, userCreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersUpdatedAfter = `-- name: GetUsersUpdatedAfter :many
SELECT user_id, username, full_name, email, password_hash, password_salt, country_code, role_id, user_status, last_login_at, username_changed_at, email_changed_at, password_changed_at, user_created_at, user_updated_at, account_id, account_name, account_type, owner, bio, account_status, plan, avatar_uri, plays, likes, follows, shares, account_type_id, account_type_name, permissions, is_artist, is_producer, is_writer, is_label, is_regular_user
FROM "idp_svc"."UserAccount_View"
WHERE user_updated_at > $1
`

func (q *Queries) GetUsersUpdatedAfter(ctx context.Context, userUpdatedAt time.Time) ([]IdpSvcUserAccountView, error) {
	rows, err := q.db.Query(ctx, getUsersUpdatedAfter, userUpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcUserAccountView{}
	for rows.Next() {
		var i IdpSvcUserAccountView
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.PasswordSalt,
			&i.CountryCode,
			&i.RoleID,
			&i.UserStatus,
			&i.LastLoginAt,
			&i.UsernameChangedAt,
			&i.EmailChangedAt,
			&i.PasswordChangedAt,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.AccountID,
			&i.AccountName,
			&i.AccountType,
			&i.Owner,
			&i.Bio,
			&i.AccountStatus,
			&i.Plan,
			&i.AvatarUri,
			&i.Plays,
			&i.Likes,
			&i.Follows,
			&i.Shares,
			&i.AccountTypeID,
			&i.AccountTypeName,
			&i.Permissions,
			&i.IsArtist,
			&i.IsProducer,
			&i.IsWriter,
			&i.IsLabel,
			&i.IsRegularUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
