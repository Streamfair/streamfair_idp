// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: roles.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "idp_svc"."Roles" (role_name, permissions) VALUES ($1, $2) RETURNING id, role_name, permissions
`

type CreateRoleParams struct {
	RoleName    string `json:"role_name"`
	Permissions []byte `json:"permissions"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (IdpSvcRole, error) {
	row := q.db.QueryRow(ctx, createRole, arg.RoleName, arg.Permissions)
	var i IdpSvcRole
	err := row.Scan(&i.ID, &i.RoleName, &i.Permissions)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "idp_svc"."Roles" WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, role_name, permissions FROM "idp_svc"."Roles" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int64) (IdpSvcRole, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i IdpSvcRole
	err := row.Scan(&i.ID, &i.RoleName, &i.Permissions)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, role_name, permissions FROM "idp_svc"."Roles" WHERE role_name = $1 LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, roleName string) (IdpSvcRole, error) {
	row := q.db.QueryRow(ctx, getRoleByName, roleName)
	var i IdpSvcRole
	err := row.Scan(&i.ID, &i.RoleName, &i.Permissions)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, role_name, permissions FROM "idp_svc"."Roles" ORDER BY id LIMIT $1 OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]IdpSvcRole, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdpSvcRole{}
	for rows.Next() {
		var i IdpSvcRole
		if err := rows.Scan(&i.ID, &i.RoleName, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE "idp_svc"."Roles" SET role_name = COALESCE($2, role_name), permissions = COALESCE($3, permissions) WHERE id = $1 RETURNING role_name, permissions
`

type UpdateRoleParams struct {
	ID          int64  `json:"id"`
	RoleName    string `json:"role_name"`
	Permissions []byte `json:"permissions"`
}

type UpdateRoleRow struct {
	RoleName    string `json:"role_name"`
	Permissions []byte `json:"permissions"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (UpdateRoleRow, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.RoleName, arg.Permissions)
	var i UpdateRoleRow
	err := row.Scan(&i.RoleName, &i.Permissions)
	return i, err
}
